// 1. Implement the following operations on BST 
// a. Find ()    b. Insert ()    c. Delete ()    
// d. Preorder ()    e. Inorder ()    f. Postorder ()


class Node {
    constructor(data) {
      this.data = data;
      this.left = null;
      this.right = null;
    }
  }
  
  class BST {
    constructor() {
      this.root = null;
    }
  
    // Insert a node into the BST
    insert(data) {
      const newNode = new Node(data);
      if (!this.root) {
        this.root = newNode;
        return this.root;
      }
      this.insertNode(this.root, newNode);
      return this.root;
    }
  
    insertNode(node, newNode) {
      if (newNode.data < node.data) {
        if (node.left === null) {
          node.left = newNode;
        } else {
          this.insertNode(node.left, newNode);
        }
      } else {
        if (node.right === null) {
          node.right = newNode;
        } else {
          this.insertNode(node.right, newNode);
        }
      }
    }
  
    // Find a node with a given value
    find(data) {
      return this.findNode(this.root, data);
    }
  
    findNode(node, data) {
      if (node === null) {
        return null;
      }
      if (data === node.data) {
        return node;
      }
      if (data < node.data) {
        return this.findNode(node.left, data);
      }
      return this.findNode(node.right, data);
    }
  
    // Delete a node with a given value
    delete(data) {
      this.root = this.deleteNode(this.root, data);
    }
  
    deleteNode(node, data) {
      if (node === null) {
        return null;
      }
      if (data < node.data) {
        node.left = this.deleteNode(node.left, data);
      } else if (data > node.data) {
        node.right = this.deleteNode(node.right, data);
      } else {
        if (node.left === null && node.right === null) {
          node = null;
        } else if (node.left === null) {
          node = node.right;
        } else if (node.right === null) {
          node = node.left;
        } else {
          const minRight = this.findMin(node.right);
          node.data = minRight.data;
          node.right = this.deleteNode(node.right, minRight.data);
        }
      }
      return node;
    }
  
    findMin(node) {
      while (node.left !== null) {
        node = node.left;
      }
      return node;
    }
  
    // Preorder Traversal
    preorder() {
      const result = [];
      this.preorderTraverse(this.root, result);
      return result;
    }
  
    preorderTraverse(node, result) {
      if (node === null) return;
      result.push(node.data);
      this.preorderTraverse(node.left, result);
      this.preorderTraverse(node.right, result);
    }
  
    // Inorder Traversal
    inorder() {
      const result = [];
      this.inorderTraverse(this.root, result);
      return result;
    }
  
    inorderTraverse(node, result) {
      if (node === null) return;
      this.inorderTraverse(node.left, result);
      result.push(node.data);
      this.inorderTraverse(node.right, result);
    }
  
    // Postorder Traversal
    postorder() {
      const result = [];
      this.postorderTraverse(this.root, result);
      return result;
    }
  
    postorderTraverse(node, result) {
      if (node === null) return;
      this.postorderTraverse(node.left, result);
      this.postorderTraverse(node.right, result);
      result.push(node.data);
    }
  }
  
  const bst = new BST();
  
  console.log("Inserting nodes into the BST:");
  bst.insert(50);
  bst.insert(30);
  bst.insert(70);
  bst.insert(20);
  bst.insert(30);
  bst.insert(60);
  bst.insert(80);
  
  console.log("Preorder Traversal:");
  console.log(bst.preorder());
  
  console.log("Inorder Traversal:");
  console.log(bst.inorder());
  
  console.log("Postorder Traversal:");
  console.log(bst.postorder());
  
  console.log("Finding a node with data 30:");
  console.log(bst.find(30));
  
  console.log("Deleting a node with data 30:");
  bst.delete(30);
  console.log("Inorder Traversal after deletion:");
  console.log(bst.inorder());
  