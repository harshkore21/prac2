// 2. Implement the following functions for Doubly Linked List
// a. Append(element): Inserts a new node at the end of the list
// b. AddAtBeg(elment): Add Node at the beginning of the list
// c. InsertAt(index): Inserts node at a particular position
// d. InsertAfter(index): Inserts a node after a particular position
// e. removeElement(element): Removes a particular element from the list
// f. removeAt(index): Removes the element at a particular position
// g. Search(element)
// h. Display()

var head

class doubly{
    constructor(data){
        this.data = data
        this.next = null
        this.prev = null
    }
}

function append(data) {
    if (head==null) {
        head = new doubly(data)
    } else {
        var newnode = new doubly(data)
        var temp = head
        while (temp.next!=null) {
            temp = temp.next
        }
        temp.next = newnode
        newnode.prev = temp
    }
}

function addAtBeg(data) {
    if (head==null) {
        head = new doubly(data)
    } else {
        var newnode = new doubly(data)
        newnode.next = head
        head = newnode
        console.log(data+" is inserted at the beginning")
    }
}

function insertAt(data,index){
    var newnode = new doubly(data)
    var tnode = head
    var count = 0
    while (tnode.next!=null) {
        tnode = tnode.next
        count++
        if (count==index-1) {
            newnode.next = tnode.next
            newnode.prev = tnode
            tnode.next.prev = newnode
            tnode.next = newnode
            console.log(data+" is inserted at index "+index)
        }
    }
}

function insertAfter(data,index) {
    var newnode = new doubly(data)
    var tnode = head
    var count = 0
    while (tnode.next!=null) {
        tnode = tnode.next
        count++
        if (count == index) {
            newnode.next = tnode.next
            newnode.prev = tnode
            tnode.next.prev = newnode
            tnode.next = newnode
            console.log(data+" is inserted after index "+index)
        }
    }
}

function removeElement(data) {
    var tnode = head
    while(tnode.next!=null){
        if (tnode.next.data==data) {
            tnode.next = tnode.next.next
            tnode.next.next.prev = tnode
            console.log(data+" is removed")
        }
        tnode = tnode.next
    }
}

function removeAt(index) {
    var tnode = head
    if (index==0) {
        tnode = head.next
        tnode.prev = null
        head = tnode
    }
    else{
        var i
        for(i=0; i<index-1; i++){
            tnode = tnode.next
        }
        console.log(tnode.next.data+ " is removed")
        tnode.next.next.prev = tnode
        tnode.next = tnode.next.next
    }
}

function search(x) {
    var tnode = head
    while(tnode.next!=null){
        if (tnode.data==x) {
            return true
        }
        tnode = tnode.next
    }
    return false
}

function display() {
    var temp = head
    console.log("Linked List: ")
    while (temp!=null) {
        process.stdout.write(temp.data+" ")
        temp=temp.next
    }
    console.log()
}

append(10)
append(20)
append(30)
append(40)

display()

addAtBeg(5)
display()

insertAt(25,2)
display()

insertAfter(35,3)
display()

removeElement(20)
display()

removeAt(2)
display()

var x = 25
if (search(x)) {
    console.log(x+" Exists")
} else {
    console.log(x+" Doesn't exist")
} 
display()
    
