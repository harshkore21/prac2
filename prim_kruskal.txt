// 10. Implement Greedy Algorithm-Prim’s algorithm & Kruskal’s algorithm

// Greedy Algo for Minimum Spanning Tree / Prim’s Algo:
function prim(graph) {
  const numVertices = graph.length;
  const parent = Array(numVertices).fill(-1);
  const key = Array(numVertices).fill(Number.MAX_SAFE_INTEGER);
  const mstSet = Array(numVertices).fill(false);
  key[0] = 0;
  for (let count = 0; count < numVertices - 1; count++) {
    const u = minKey(key, mstSet);
    mstSet[u] = true;
    for (let v = 0; v < numVertices; v++) {
      if (graph[u][v] && !mstSet[v] && graph[u][v] < key[v]) {
      parent[v] = u;
      key[v] = graph[u][v];
      }
    }
    if (count !== numVertices - 2) {
      console.log(`Selected edge: ${u} - ${parent[u]} with weight ${key[u]}`);
    }
  }
  return parent;
}

function minKey(key, mstSet) {
let min = Number.MAX_SAFE_INTEGER;
let minIndex = -1;
for (let v = 0; v < key.length; v++) {
  if (!mstSet[v] && key[v] < min) {
    min = key[v];
    minIndex = v;
  }
}
return minIndex;
}
const graph = [
[0, 2, 0, 6, 0],
[2, 0, 3, 8, 5],
[0, 3, 0, 0, 7],
[6, 8, 0, 0, 9],
[0, 5, 7, 9, 0],
];
const parentPrim = prim(graph);
console.log("Parent Array for Prim's Minimum Spanning Tree:",
parentPrim);

// Greedy Algo for Minimum Spanning Tree / Kruskal’s Algo:
class DisjointSet {
  constructor(size) {
    this.parent = Array(size).fill(-1);
  }
  find(x) {
    if (this.parent[x] === -1) return x;
    return this.find(this.parent[x]);
  }
  union(x, y) {
    const xRoot = this.find(x);
    const yRoot = this.find(y);
    if (xRoot !== yRoot) {
      this.parent[yRoot] = xRoot;
    }
  }
}

function kruskal(graph) {
  const numVertices = graph.length;
  const parent = Array(numVertices).fill(-1);
  const disjointSet = new DisjointSet(numVertices);
  const edges = [];
  for (let i = 0; i < numVertices; i++) {
    for (let j = i + 1; j < numVertices; j++) {
      if (graph[i][j] !== 0) {
        edges.push([i, j, graph[i][j]]);
      }
    }
  }
  edges.sort((a, b) => a[2] - b[2]);
  const mstEdges = [];
  for (const edge of edges) {
    const [u, v, weight] = edge;
    if (disjointSet.find(u) !== disjointSet.find(v)) {
      mstEdges.push([u, v]);
      disjointSet.union(u, v);
    }
    console.log(`Selected edge: ${u} - ${v} with weight
    ${weight}`);
  }
  return mstEdges;
}
const graphKruskal = [
[0, 2, 0, 6, 0],
[2, 0, 3, 8, 5],
[0, 3, 0, 0, 7],
[6, 8, 0, 0, 9],
[0, 5, 7, 9, 0]
];
const mstEdges = kruskal(graphKruskal);
console.log("Kruskal's Minimum Spanning Tree (Edges):", mstEdges);

// class Graph {
//     constructor(vertices) {
//       this.V = vertices
//       this.edges = []
//     }
  
//     addEdge(u, v, weight) {
//       this.edges.push({ u, v, weight })
//     }
  
//     // Kruskal's Algorithm
//     kruskalMST() {
//       this.edges.sort((a, b) => a.weight - b.weight)
//       const parent = new Array(this.V)
//       const rank = new Array(this.V).fill(0)
  
//       for (let i = 0; i < this.V; i++) {
//         parent[i] = i
//       }
  
//       const result = []
  
//       for (let i = 0, e = 0; e < this.V - 1; i++) {
//         const { u, v, weight } = this.edges[i]
//         const x = this.find(parent, u)
//         const y = this.find(parent, v)
  
//         if (x !== y) {
//           result.push({ u, v, weight })
//           this.union(parent, rank, x, y)
//           e++;
//         }
//       }
  
//       this.printMST(result, 'Kruskal')
//     }
  
//     // Prim's Algorithm
//     primMST() {
//       const parent = new Array(this.V)
//       const key = new Array(this.V)
//       const mstSet = new Array(this.V)
//       key.fill(Number.MAX_SAFE_INTEGER)
//       mstSet.fill(false)
//       key[0] = 0
//       parent[0] = -1
  
//       for (let count = 0; count < this.V - 1; count++) {
//         const u = this.minKey(key, mstSet)
//         mstSet[u] = true;
//         for (let v = 0; v < this.V; v++) {
//           const index = this.edges.findIndex((edge) =>
//             (edge.u === u && edge.v === v) || (edge.u === v && edge.v === u)
//           );
//           if (index !== -1 && !mstSet[v] && this.edges[index].weight < key[v]) {
//             parent[v] = u
//             key[v] = this.edges[index].weight
//           }
//         }
//       }
  
//       this.printMST(parent, 'Prim')
//     }
  
//     minKey(key, mstSet) {
//       let min = Number.MAX_SAFE_INTEGER
//       let minIndex = -1
//       for (let v = 0; v < this.V; v++) {
//         if (!mstSet[v] && key[v] < min) {
//           min = key[v]
//           minIndex = v
//         }
//       }
//       return minIndex
//     }
  
//     find(parent, i) {
//       if (parent[i] !== i) {
//         parent[i] = this.find(parent, parent[i])
//       }
//       return parent[i]
//     }
  
//     union(parent, rank, x, y) {
//       const rootX = this.find(parent, x)
//       const rootY = this.find(parent, y)
  
//       if (rank[rootX] < rank[rootY]) {
//         parent[rootX] = rootY
//       } else if (rank[rootX] > rank[rootY]) {
//         parent[rootY] = rootX
//       } else {
//         parent[rootY] = rootX
//         rank[rootX]++
//       }
//     }
  
//     printMST(result, algorithm) {
//       console.log(`Minimum Spanning Tree using ${algorithm}:\nEdge \tWeight`)
//       result.forEach(({ u, v, weight }) => {
//         console.log(`${u} - ${v} \t${weight}`)
//       })
//     }
//   }
  
//   const g = new Graph(4)
//   g.addEdge(0, 1, 10)
//   g.addEdge(0, 2, 6)
//   g.addEdge(0, 3, 5)
//   g.addEdge(1, 3, 15)
//   g.addEdge(2, 3, 4)
  
//   console.log('Minimum Spanning Tree using Kruskal:')
//   g.kruskalMST()
  
//   console.log('Minimum Spanning Tree using Prim:')
//   g.primMST()