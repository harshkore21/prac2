// 5. Implement Graph and graph traversals

class Graph{
    constructor(){
        this.vertices = new Map()
    }

    // add vertex
    addVertex(vertex){
        if (!this.vertices.has(vertex)) {
            this.vertices.set(vertex, [])
        }
    }

    // add edges
    addEdge(vertex1, vertex2){
        this.vertices.get(vertex1).push(vertex2)
    }

    // BFS
    bfs(startingVertex){
        const visited = new Set()
        const result = []
        const queue = [startingVertex]

        visited.add(startingVertex)

        while(queue.length > 0){
            const currentVertex = queue.shift()
            result.push(currentVertex)

            for(const neighbour of this.vertices.get(currentVertex)){
                if (!visited.has(neighbour)) {
                    visited.add(neighbour)
                    queue.push(neighbour)
                }
            }
        }
        return result
    }

    // DFS
    dfs(startingVertex){
        const visited = new Set()
        const result = []

        const dfsHelper = (vertex) => {
            visited.add(vertex)
            result.push(vertex)

            for(const neighbour of this.vertices.get(vertex)){
                if (!visited.has(neighbour)) {
                    dfsHelper(neighbour)
                }
            }
        };
        dfsHelper(startingVertex)
        return result
    }

    // Topological Sort
    topologicalSort(){
        const visited = new Set()
        const stack = []
        const result = []

        for(const vertex of this.vertices.keys()){
            if (!visited.has(vertex)) {
                const dfsStack = [vertex]

                while (dfsStack.length > 0) {
                    const currentVertex = dfsStack[dfsStack.length -1]

                    if (visited.has(currentVertex)) {
                        dfsStack.pop()
                        continue
                    }

                    visited.add(currentVertex)

                    let hasUnvisitedNeighbours = false

                    for(const neighbour of this.vertices.get(currentVertex)){
                        if (!visited.has(neighbour)) {
                            dfsStack.push(neighbour)
                            hasUnvisitedNeighbours = true
                        }
                    }

                    if (!hasUnvisitedNeighbours) {
                        stack.push(currentVertex)
                    }
                }
            }
        }

        while (stack.length > 0) {
            result.push(stack.pop())
        }

        return result
    }
}

// Create a graph
const graph = new Graph()

// Add Vertex
graph.addVertex(1)
graph.addVertex(2)
graph.addVertex(3)
graph.addVertex(4)
graph.addVertex(5)
graph.addVertex(6)
graph.addVertex(7)
graph.addVertex(8)
graph.addVertex(9)

// Add Edges
graph.addEdge(1, 2)
graph.addEdge(1, 3)
graph.addEdge(2, 4)
graph.addEdge(2, 5)
graph.addEdge(3, 6)
graph.addEdge(3, 7)
graph.addEdge(4, 8)
graph.addEdge(4, 9)

// BFS DFS and Topological Sort
console.log('Breadth First Search (BFS): ', graph.bfs(1))
console.log('Depth First Search (DFS): ', graph.dfs(1))
console.log('Topological Sort: ', graph.topologicalSort())